# -*- python3 -*-
# ex: set syntax=python3:

import bot_config

from buildbot.plugins import *

from utils.matrix_reporter import MatrixReporter
from utils.github_handler import CustomGitHubEventHandler
from utils.user_auth import UserAuth


# ----------------------------------------------------------------------------------------------------------------------


# qtpyvcp stable

from qtpyvcp_factory.x86.stable.qtpyvcp_pyqt5_x86_factory import factory_qtpyvcp_pyqt5_x86
from qtpyvcp_factory.x86.stable.qtpyvcp_pyside6_x86_factory import factory_qtpyvcp_pyside6_x86

from qtpyvcp_factory.arm64.stable.qtpyvcp_pyqt5_arm64_factory import factory_qtpyvcp_pyqt5_arm64
from qtpyvcp_factory.arm64.stable.qtpyvcp_pyside6_arm64_factory import factory_qtpyvcp_pyside6_arm64


# qtpyvcp develop

from qtpyvcp_factory.x86.dev.qtpyvcp_pyqt5_x86_dev_factory import factory_qtpyvcp_pyqt5_x86_dev
from qtpyvcp_factory.x86.dev.qtpyvcp_pyside6_x86_dev_factory import factory_qtpyvcp_pyside6_x86_dev

from qtpyvcp_factory.arm64.dev.qtpyvcp_pyqt5_arm64_dev_factory import factory_qtpyvcp_pyqt5_arm64_dev
from qtpyvcp_factory.arm64.dev.qtpyvcp_pyside6_arm64_dev_factory import factory_qtpyvcp_pyside6_arm64_dev


# ----------------------------------------------------------------------------------------------------------------------


# from probe_basic_factory.probe_basic_x86_factory import factory_probe_basic
# from probe_basic_factory.probe_basic_x86_dev_factory import factory_probe_basic_dev

# from probe_basic_factory.probe_basic_arm64_factory import factory_probe_basic_arm64
# from probe_basic_factory.probe_basic_arm64_dev_factory import factory_probe_basic_arm64_dev


# ----------------------------------------------------------------------------------------------------------------------


# turbonc stable

from tnc_factory.x86.stable.tnc_pyqt5_x86_factory import factory_tnc_pyqt5_x86
from tnc_factory.x86.stable.tnc_pyside6_x86_factory import factory_tnc_pyside6_x86

from tnc_factory.arm64.stable.tnc_pyqt5_arm64_factory import factory_tnc_pyqt5_arm64
from tnc_factory.arm64.stable.tnc_pyside6_arm64_factory import factory_tnc_pyside6_arm64

# turbonc develop

from tnc_factory.x86.dev.tnc_pyqt5_x86_dev_factory import factory_tnc_pyqt5_x86_dev
from tnc_factory.x86.dev.tnc_pyside6_x86_dev_factory import factory_tnc_pyside6_x86_dev

from tnc_factory.arm64.dev.tnc_pyqt5_arm64_dev_factory import factory_tnc_pyqt5_arm64_dev
from tnc_factory.arm64.dev.tnc_pyside6_arm64_dev_factory import factory_tnc_pyside6_arm64_dev

# ----------------------------------------------------------------------------------------------------------------------


# monokrom develop
# from monokrom_factory.monokrom_x86_dev_factory import factory_monokrom_x86_dev
# from monokrom_factory.monokrom_arm64_dev_factory import factory_monokrom_arm64_dev

# from monokrom_factory.monokrom_pyside6_x86_dev_factory import factory_monokrom_pyisde6_x86_dev
# from monokrom_factory.monokrom_pyside6_arm64_dev_factory import factory_monokrom_pyside6_arm64_dev

# ----------------------------------------------------------------------------------------------------------------------

# from linuxcnc_factory import factory_linuxcnc

# This is the dictionary that the buildmaster pays attention to.




c = BuildmasterConfig = {}

# WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
	worker.Worker("kcjengr-pyqt5-x86-worker", bot_config.worker),
	worker.Worker("kcjengr-pyqt5-arm64-worker", bot_config.worker),
	worker.Worker("kcjengr-pyside6-x86-worker", bot_config.worker),
	worker.Worker("kcjengr-pyside6-arm64-worker", bot_config.worker)
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)

c['protocols'] = {'pb': {'port': 9989}}

# CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []

# c['change_source'].append(changes.GitPoller(
#        'https://github.com/kcjengr/qtpyvcp.git',
#        workdir='gitpoller-workdir', branch='master',
#        pollInterval=300))

# SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.


c['schedulers'] = []

# ----------------------------------------------------------------------------------------------------------------------
# QtPyVCP
# ----------------------------------------------------------------------------------------------------------------------

# c['schedulers'].append(schedulers.SingleBranchScheduler(
#    name="qtpyvcp_all",
#    change_filter=util.ChangeFilter(category=None, project='kcjengr/qtpyvcp', branch='main'),
#    treeStableTimer=30,
#    builderNames=["qtpyvcp-pyqt5-x86-dev", "qtpyvcp-pyqt5-arm64-dev", "qtpyvcp-pyside6-x86-dev", "qtpyvcp-pyside6-arm64-dev"]))

# c['schedulers'].append(schedulers.SingleBranchScheduler(
#    name="qtpyvcp_release",
#    change_filter=util.ChangeFilter(category='tag', project='kcjengr/qtpyvcp'),
#    treeStableTimer=30,
#    builderNames=["qtpyvcp-pyqt5-x86", "qtpyvcp-pyqt5-arm64", "qtpyvcp-pyside6-x86", "qtpyvcp-pyside6-arm64"]))

# ----------------------------------------------------------------------------------------------------------------------
# Probe Basic
# ----------------------------------------------------------------------------------------------------------------------

# c['schedulers'].append(schedulers.SingleBranchScheduler(
#    name="probe_basic_all",
#    change_filter=util.ChangeFilter(category=None, project='kcjengr/probe_basic', branch='main'),
#    treeStableTimer=30,
#    builderNames=["probe_basic-dev","probe_basic-pi4-dev"]))

# c['schedulers'].append(schedulers.SingleBranchScheduler(
#    name="probe_basic_release",
#    change_filter=util.ChangeFilter(category='tag', project='kcjengr/probe_basic'),
#    treeStableTimer=30,
#    builderNames=["probe_basic", "probe_basic-pi4"]))

# ----------------------------------------------------------------------------------------------------------------------
# TurBoNC
# ----------------------------------------------------------------------------------------------------------------------





c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="tnc_pyqt5_x86",
    change_filter=util.ChangeFilter(category=None, project='kcjengr/turbonc'),
    treeStableTimer=30,
    builderNames=["turbonc-pyqt5-x86", "turbonc-pyqt5-x86-dev"]))

c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="tnc_pyqt5_arm64",
    change_filter=util.ChangeFilter(category=None, project='kcjengr/turbonc'),
    treeStableTimer=30,
    builderNames=["turbonc-pyqt5-arm64", "turbonc-pyqt5-arm64-dev"]))


c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="tnc_pyside6_x86",
    change_filter=util.ChangeFilter(category='tag', project='kcjengr/turbonc'),
    treeStableTimer=30,
    builderNames=["turbonc-pyside6-x86", "turbonc-pyside6-x86-dev"]))


c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="tnc_pyside6_arm64",
    change_filter=util.ChangeFilter(category='tag', project='kcjengr/turbonc'),
    treeStableTimer=30,
    builderNames=["turbonc-pyside6-arm64", "turbonc-pyside6-arm64-dev"]))


# ----------------------------------------------------------------------------------------------------------------------
# Monokrom
# ----------------------------------------------------------------------------------------------------------------------

# c['schedulers'].append(schedulers.SingleBranchScheduler(
#    name="monokrom_all",
#    change_filter=util.ChangeFilter(category=None, project='kcjengr/monokrom', branch='main'),
#    treeStableTimer=30,
#    builderNames=["monokrom-dev", "monokrom-pi4-dev"]))

# ----------------------------------------------------------------------------------------------------------------------
# LinuxCNC
# ----------------------------------------------------------------------------------------------------------------------
    
# c['schedulers'].append(schedulers.SingleBranchScheduler(
#    name="linuxcnc",
#    change_filter=util.ChangeFilter(category=None, project='linuxcnc/linuxcnc', branch='master'),
#    treeStableTimer=30,
#    builderNames=["linuxcnc"]))



# c['schedulers'].append(schedulers.SingleBranchScheduler(
#    name="force",
#    change_filter=util.ChangeFilter(category=None, project='kcjengr/turbonc'),
#    treeStableTimer=30,
#    builderNames=["turbonc-pyqt5-x86-dev"]))




# BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.




#    util.BuilderConfig(name="probe_basic", workernames=["kcjengr-x86-worker"], factory=factory_probe_basic),
#    util.BuilderConfig(name="probe_basic-dev", workernames=["kcjengr-x86-worker"], factory=factory_probe_basic_dev),
#    util.BuilderConfig(name="probe_basic-arm64", workernames=["kcjengr-arm64-worker"], factory=factory_probe_basic_arm64),
#    util.BuilderConfig(name="probe_basic-arm64-dev", workernames=["kcjengr-arm64-worker"], factory=factory_probe_basic_arm64_dev),

#    util.BuilderConfig(name="monokrom-dev", workernames=["kcjengr-x86-worker"], factory=factory_monokrom_dev),
#    util.BuilderConfig(name="monokrom-arm64-dev", workernames=["kcjengr-arm64-worker"], factory=factory_monokrom_arm64_dev),

c['builders'] = [

    util.BuilderConfig(name="qtpyvcp-pyqt5-x86", workernames=["kcjengr-pyqt5-x86-worker"], factory=factory_qtpyvcp_pyqt5_x86),
    util.BuilderConfig(name="qtpyvcp-pyqt5-arm64", workernames=["kcjengr-pyqt5-arm64-worker"], factory=factory_qtpyvcp_pyqt5_arm64),
    util.BuilderConfig(name="qtpyvcp-pyqt5-x86-dev", workernames=["kcjengr-pyqt5-x86-worker"], factory=factory_qtpyvcp_pyqt5_x86_dev),
    util.BuilderConfig(name="qtpyvcp-pyqt5-arm64-dev", workernames=["kcjengr-pyqt5-arm64-worker"], factory=factory_qtpyvcp_pyqt5_arm64_dev),

    util.BuilderConfig(name="qtpyvcp-pyside6-x86", workernames=["kcjengr-pyside6-x86-worker"], factory=factory_qtpyvcp_pyside6_x86),
    util.BuilderConfig(name="qtpyvcp-pyside6-arm64", workernames=["kcjengr-pyside6-arm64-worker"], factory=factory_qtpyvcp_pyside6_arm64),
    util.BuilderConfig(name="qtpyvcp-pyside6-x86-dev", workernames=["kcjengr-pyside6-x86-worker"], factory=factory_qtpyvcp_pyside6_x86_dev),
    util.BuilderConfig(name="qtpyvcp-pyside6-arm64-dev", workernames=["kcjengr-pyside6-arm64-worker"], factory=factory_qtpyvcp_pyside6_arm64_dev),


    util.BuilderConfig(name="turbonc-pyqt5-x86", workernames=["kcjengr-pyqt5-x86-worker"], factory=factory_tnc_pyqt5_x86),
    util.BuilderConfig(name="turbonc-pyqt5-arm64", workernames=["kcjengr-pyqt5-arm64-worker"], factory=factory_tnc_pyqt5_arm64),
    util.BuilderConfig(name="turbonc-pyqt5-x86-dev", workernames=["kcjengr-pyqt5-x86-worker"], factory=factory_tnc_pyqt5_x86_dev),
    util.BuilderConfig(name="turbonc-pyqt5-arm64-dev", workernames=["kcjengr-pyqt5-arm64-worker"], factory=factory_tnc_pyqt5_arm64_dev),

    util.BuilderConfig(name="turbonc-pyside6-x86", workernames=["kcjengr-pyside6-x86-worker"], factory=factory_tnc_pyside6_x86),
    util.BuilderConfig(name="turbonc-pyside6-arm64", workernames=["kcjengr-pyside6-arm64-worker"], factory=factory_tnc_pyside6_arm64),
    util.BuilderConfig(name="turbonc-pyside6-x86-dev", workernames=["kcjengr-pyside6-x86-worker"], factory=factory_tnc_pyside6_x86_dev),
    util.BuilderConfig(name="turbonc-pyside6-arm64-dev", workernames=["kcjengr-pyside6-arm64-worker"], factory=factory_tnc_pyside6_arm64_dev)

]

# BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

# matrix_reporter = MatrixReporter(serverUrl=bot_config.matrix_server,
#                                 userName=bot_config.matrix_user,
#                                 userToken=bot_config.matrix_user_token,
#                                 roomID=bot_config.matrix_room_id,
#                                 headers=None,
#                                 debug=bot_config.matrix_debug,
#                                 verify=None,
#                                 generators=None)


c['services'] = []
# c['services'].append(matrix_reporter)


# PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "kcjengr CI"
c['titleURL'] = "https://repository.qtpyvcp.com/buildbot/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://repository.qtpyvcp.com/buildbot/"

# minimalistic config to activate new web UI
# c['www'] = dict(port=8010,
#                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
c['www'] = {
    "port": 8010,
    "allowed_origins": ["*"],
    "auth": util.CustomAuth(),
    "plugins": {
        "badges": {
            "left_pad": 0,
            "right_pad": 0,
            "border_radius": 3,
            "style": "badgeio"
        },
        "waterfall_view": {},
        "console_view" :{},
        "grid_view": {}
    }
}


c['www']['auth'] = UserAuth()


c['www']['authz'] = util.Authz(
    allowRules=[
        util.AnyControlEndpointMatcher(role="admins")
    ],
    roleMatchers=[
        util.RolesFromUsername(roles=['admins'], usernames=['admin'])
    ]
)

# DB URL


c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url': "sqlite:///state.sqlite",
}


# GitHub WebHook receiver
c['www']['change_hook_dialects'] = {
    'github': {
        'secret': bot_config.github_phrase,
        'strict': True,
        'class': CustomGitHubEventHandler
    },
}

# Don't report usage data to buildbot project
c['buildbotNetUsageData'] = None

